{
	"variables": [],
	"info": {
		"name": "KKBOX",
		"_postman_id": "3459e584-61d8-f087-c656-1fadcda1e20a",
		"description": "",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json"
	},
	"item": [
		{
			"name": "Search API",
			"request": {
				"url": {
					"raw": "https://api.kkbox.com/v1.1/search?q=剛好遇見你&type=track&territory=TW",
					"protocol": "https",
					"host": [
						"api",
						"kkbox",
						"com"
					],
					"path": [
						"v1.1",
						"search"
					],
					"query": [
						{
							"key": "q",
							"value": "剛好遇見你",
							"equals": true,
							"description": "搜索關鍵字，必須使用 URL 編碼"
						},
						{
							"key": "type",
							"value": "track",
							"equals": true,
							"description": "搜尋結果類型，可以是 track、album、artist、playlist。未填的話預設為搜尋全部類型"
						},
						{
							"key": "territory",
							"value": "TW",
							"equals": true,
							"description": "地區參數，可以使用的有： TW, HK, SG, MY, JP"
						}
					],
					"variable": []
				},
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{Bearer}}",
						"description": ""
					}
				],
				"body": {},
				"description": "Search API"
			},
			"response": []
		},
		{
			"name": "Get Access Token",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"tests[\"Status code is 200\"] = responseCode.code === 200 ;",
							"tests[\"Content-Type is present\"] = responseHeaders.hasOwnProperty( \"Content-Type\" );",
							"tests[\"Content-Type is json\"] = postman.getResponseHeader( \"Content-Type\" ).indexOf( \"application/json\" ) !== -1;",
							"",
							"var data = JSON.parse( responseBody );",
							"tests[\"Bearer ok\"] = data.access_token !== '' ;",
							"",
							"postman.setEnvironmentVariable( \"Bearer\", data.access_token );"
						]
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							"var Base64 = {",
							"    _keyStr: \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\",",
							"",
							"    encode: function(input) {",
							"        var output = \"\";",
							"        var chr1, chr2, chr3, enc1, enc2, enc3, enc4;",
							"        var i = 0;",
							"        input = Base64._utf8_encode(input);",
							"        while (i < input.length) {",
							"            chr1 = input.charCodeAt(i++);",
							"            chr2 = input.charCodeAt(i++);",
							"            chr3 = input.charCodeAt(i++);",
							"            enc1 = chr1 >> 2;",
							"            enc2 = ((chr1 & 3) << 4) | (chr2 >> 4);",
							"            enc3 = ((chr2 & 15) << 2) | (chr3 >> 6);",
							"            enc4 = chr3 & 63;",
							"            if (isNaN(chr2)) {",
							"                enc3 = enc4 = 64;",
							"            } else if (isNaN(chr3)) {",
							"                enc4 = 64;",
							"            }",
							"            output = output + this._keyStr.charAt(enc1) + this._keyStr.charAt(enc2) + this._keyStr.charAt(enc3) + this._keyStr.charAt(enc4);",
							"        }",
							"        return output;",
							"    },",
							"",
							"    decode: function(input) {",
							"        var output = \"\";",
							"        var chr1, chr2, chr3;",
							"        var enc1, enc2, enc3, enc4;",
							"        var i = 0;",
							"        input = input.replace(/[^A-Za-z0-9\\+\\/\\=]/g, \"\");",
							"        while (i < input.length) {",
							"            enc1 = this._keyStr.indexOf(input.charAt(i++));",
							"            enc2 = this._keyStr.indexOf(input.charAt(i++));",
							"            enc3 = this._keyStr.indexOf(input.charAt(i++));",
							"            enc4 = this._keyStr.indexOf(input.charAt(i++));",
							"            chr1 = (enc1 << 2) | (enc2 >> 4);",
							"            chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);",
							"            chr3 = ((enc3 & 3) << 6) | enc4;",
							"            output = output + String.fromCharCode(chr1);",
							"            if (enc3 != 64) {",
							"                output = output + String.fromCharCode(chr2);",
							"            }",
							"            if (enc4 != 64) {",
							"                output = output + String.fromCharCode(chr3);",
							"            }",
							"        }",
							"        output = Base64._utf8_decode(output);",
							"        return output;",
							"    },",
							"",
							"    _utf8_encode: function(string) {",
							"        string = string.replace(/\\r\\n/g, \"\\n\");",
							"        var utftext = \"\";",
							"        for (var n = 0; n < string.length; n++) {",
							"            var c = string.charCodeAt(n);",
							"            if (c < 128) {",
							"                utftext += String.fromCharCode(c);",
							"            } else if ((c > 127) && (c < 2048)) {",
							"                utftext += String.fromCharCode((c >> 6) | 192);",
							"                utftext += String.fromCharCode((c & 63) | 128);",
							"            } else {",
							"                utftext += String.fromCharCode((c >> 12) | 224);",
							"                utftext += String.fromCharCode(((c >> 6) & 63) | 128);",
							"                utftext += String.fromCharCode((c & 63) | 128);",
							"            }",
							"        }",
							"        return utftext;",
							"    },",
							"",
							"    _utf8_decode: function(utftext) {",
							"        var string = \"\";",
							"        var i = 0;",
							"        var c1 = 0;",
							"        var c2 = 0;",
							"        var c = 0;",
							"        ",
							"        while (i < utftext.length) {",
							"            c = utftext.charCodeAt(i);",
							"",
							"            if (c < 128) {",
							"                string += String.fromCharCode(c);",
							"                i++;",
							"            } else if ((c > 191) && (c < 224)) {",
							"                c2 = utftext.charCodeAt(i + 1);",
							"                string += String.fromCharCode(((c & 31) << 6) | (c2 & 63));",
							"                i += 2;",
							"            } else {",
							"                c2 = utftext.charCodeAt(i + 1);",
							"                c3 = utftext.charCodeAt(i + 2);",
							"                string += String.fromCharCode(((c & 15) << 12) | ((c2 & 63) << 6) | (c3 & 63));",
							"                i += 3;",
							"            }",
							"        }",
							"        return string;",
							"    }",
							"};",
							"",
							"var basicCredentials = postman.getEnvironmentVariable( \"BasicCredentials\" );",
							"",
							"if( basicCredentials === null ) throw \"BasicCredentials cannot be empty\";",
							"",
							"postman.setEnvironmentVariable( \"BasicCredentials\", Base64.encode(  postman.getEnvironmentVariable( \"ID\" ) + \":\" + postman.getEnvironmentVariable( \"Secret\" ) ) );"
						]
					}
				}
			],
			"request": {
				"url": "https://account.kkbox.com/oauth2/token",
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "Basic {{BasicCredentials}}",
						"description": ""
					}
				],
				"body": {
					"mode": "urlencoded",
					"urlencoded": [
						{
							"key": "grant_type",
							"value": "client_credentials",
							"description": ""
						}
					]
				},
				"description": "Get Access Token"
			},
			"response": []
		}
	]
}